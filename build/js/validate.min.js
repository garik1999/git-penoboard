class Validation{constructor(t,e){this.form=t,this.options=$.extend(!0,{Empty:{helpers:{empty:"Нужно заполнить"}},validationClass:{success:"valid",error:"invalid",helpers:{class:"error"}},Email:{helpers:{format:"Неверный формат"},format:/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/},Password:{helpers:{minLength:"Слишком короткий пароль",maxLength:"Слишком длинный пароль"},minLength:Number($("input[data-MinlengthPass]").attr("data-MinlengthPass"))||8,maxLength:Number($("input[data-MaxlengthPass]").attr("data-MaxlengthPass"))||10},PasswordConfirm:{helpers:{confirm:"Пароли не совпадают"}},Checkbox:{helpers:{check:"Нужно согласие"}},Name:{helpers:{minLength:"Слишком короткое имя",maxLength:"Слишком длинное имя"},minLength:Number($("input[data-MinlengthName]").attr("data-MinlengthName"))||3,maxLength:Number($("input[data-MaxlengthName]").attr("data-MaxlengthName"))||10},Surname:{helpers:{minLength:"Слишком короткая Фамилия",maxLength:"Слишком длинная Фамилия"},minLength:Number($("input[data-MinlengthSurname]").attr("data-MinlengthSurname"))||3,maxLength:Number($("input[data-MaxlengthSurname]").attr("data-MaxlengthSurname"))||10}},e||{})}setEvents(t,e,a=""){let i=this;t.on("input change "+a,(function(){e(t,i),i.formSubmit(t)}))}formSubmit(t){let e=null;this.form.each((function(){$(this).find($(t)).length>0&&(e=$(this))}));let a=e.find("input").length,i=e.find(".valid").length,s=e.find("button, [type=submit]");a===i?s.removeClass("disabled"):s.addClass("disabled")}validationEmail(t,e){t.val().match(e.options.Email.format)?e.initHelpers(t,!0):e.initHelpers(t,!1,e.options.Email.helpers.format)}validationPassword(t,e){let a=t.attr("name");t.parents(".form").find(`[data-equalTo=${a}]`).val("").blur(),e.lengthCheck(t,"Password")}validationPasswordTwo(t,e){let a=t.attr("data-equalTo");if(void 0!==typeof a){let i=t.parents(".form").find(`input[name='${a}']`);t.val()===i.val()?e.initHelpers(t,!0):e.initHelpers(t,!1,e.options.PasswordConfirm.helpers.confirm)}}validationCheckBox(t,e){t.prop("checked")?e.initHelpers(t,!0):e.initHelpers(t,!1,e.options.Checkbox.helpers.check)}validationField(t,e){switch(t.attr("data-field")){case"name":e.lengthCheck(t,"Name");break;case"surname":e.lengthCheck(t,"Surname");break;default:console.error("not field text")}}validationEmpty(t,e){t.val().length>0?e.initHelpers(t,!0):e.initHelpers(t,!1,e.options.Empty.helpers.empty)}lengthCheck(t,e){let a=t.val().length;console.log(e),a>=this.options[e].minLength&&a<=this.options[e].maxLength?this.initHelpers(t,!0):a<=this.options[e].minLength?this.initHelpers(t,!1,this.options[e].helpers.minLength):a>=this.options[e].maxLength&&this.initHelpers(t,!1,this.options[e].helpers.maxLength)}initHelpers(t,e,a){let i=t.parent(),s=i.find("."+this.options.validationClass.helpers.class);e?(s.remove(),t.addClass(this.options.validationClass.success).removeClass(this.options.validationClass.error)):(s.length<=0&&i.append(`<span class="${this.options.validationClass.helpers.class}">${a}</span>`),t.removeClass(this.options.validationClass.success).addClass(this.options.validationClass.error))}initElement(){this.form.find("input, textarea").each(((t,e)=>{let a=$(e).attr("type"),i=$(e);if(void 0!==typeof a)switch(a){case"email":this.setEvents(i,this.validationEmail);break;case"password":void 0!==i.attr("data-equalTo")?this.setEvents(i,this.validationPasswordTwo):this.setEvents(i,this.validationPassword);break;case"checkbox":this.setEvents(i,this.validationCheckBox);break;case"text":this.setEvents(i,this.validationField);break;default:this.setEvents(i,this.validationEmpty)}}))}}const validate=new Validation($(".form"),{Password:{minLength:8}});validate.initElement();